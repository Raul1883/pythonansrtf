import pandas as pd


def read_csv_file(path):
    df = pd.read_csv(path)
    df["year"] = df["published_at"].apply(lambda x: int(x[:4]))
    df["average"] = (df["salary_from"] + df["salary_to"]) / 2
    return df[(df["salary_currency"] == "RUR") & (df["year"] > df["year"].max() - 5)] \
        .get(["name", "year", "average", "area_name"])


def get_salary_dynamic(df, profession=""):
    filtered_df = df if profession == "" else df[df["name"].str.contains(profession, case=True)]
    return filtered_df.groupby("year")["average"].mean().astype(int).reindex(
        df["year"], fill_value=0).to_dict()


def get_count_dynamic(df, profession=""):
    filtered_df = df if profession == "" else df[df["name"].str.contains(profession, case=True)]
    return filtered_df.groupby("year").size().reindex(
        df["year"], fill_value=0).astype(int).to_dict()


def get_city_salary(df, profession):
    city_salary = df[df["name"].str.contains(profession, case=True)] \
        .groupby("area_name")["average"].mean().astype(int)

    sorted_cities = city_salary.sort_values(ascending=False).reset_index() \
        .sort_values(by=["average", "area_name"], ascending=[False, True])

    return sorted_cities.head(10).set_index("area_name")["average"].to_dict()


def get_city_percent(df, profession):
    profession_data = df[df["name"].str.contains(profession, case=True)]

    total_profession_count = profession_data.shape[0]

    city_counts = profession_data.groupby("area_name").size()
    city_percent = (city_counts / total_profession_count).round(4)[city_counts >= total_profession_count // 100]

    sorted_cities = city_percent.sort_values(ascending=False).reset_index()
    sorted_cities.columns = ["area_name", "percent"]

    return sorted_cities.sort_values(by=["percent", "area_name"], ascending=[False, True]) \
        .head(10).set_index("area_name")["percent"].to_dict()


def get_stats(df, profession):
    return {
        "Динамика уровня зарплат по годам:": get_salary_dynamic(df),
        "Динамика количества вакансий по годам:": get_count_dynamic(df),
        "Динамика уровня зарплат по годам для выбранной профессии:": get_salary_dynamic(df, profession),
        "Динамика количества вакансий по годам для выбранной профессии:": get_count_dynamic(df, profession),
        "Уровень зарплат по городам для выбранной профессии (в порядке убывания):": get_city_salary(df, profession),
        "Доля вакансий по городам для выбранной профессии (в порядке убывания):": get_city_percent(df, profession),
    }


if __name__ == "__main__":
    file_name = "vacancies_for_learn.csv"
    vac_name = input()

    vacancies = read_csv_file(file_name)

    stats = get_stats(vacancies, vac_name)
    for key, value in stats.items():
        print(f"{key} {value}")
